1) What are the six combinations of access modifier
keywords and what do they do?
	Public: Access is not restricted
	Protected: Access is limited to the containing class or types derived from the containing class
	Internal: Access is limited to the current assembly (namespace)
	Private: Access is limited to its current class
	Protected Internal: Access is limited to the current assembly or types derived from the containing class
	Private Protected: Access is limited to the containing class or types derived from the containing class within the current assembly
2) What is the difference between the static, const, and readonly keywords when applied to a type member?
	Static: static class cannot be inherited, cannot be instantiated, and contains only static members
	Const: Must be assigned a value and is a constant that cannot be changed, by default a static
	Readonly: Cannot be assigned a new variable after the object is constructed
3) What does a constructor do?
	Method used to create and initialize an object
4) Why is the partial keyword useful?
	Allows you to define a class and its functionalities across multiple files
5) What is a tuple?
	Data structure that allows multiple data with in a single data set		
6) What does the C# record keyword do?
	Makes an object immutable and behave like a value-type
7) What does overloading and overriding mean?
	Method Overloading: have multiple methods in the same class with different input parameters, complile time polymorphism
	Method Overriding: happens between base class and derived class; same method signature, but derived class has different implementation of method body
			run-time polymorphism
8) What is the difference between a field and a property?
	Fields should mostly be kept private to a class and accessed with get and set properties.
	Properties expose the fields, allowing you to get or set the field
9) How do you make a method parameter optional?
	Set the default value and have it at the end of the parameters in a function	
10) What is an interface and how is it different from
abstract class?
	An interface is a collection of methods which are by default abstract and public and will be implemented by the derived class
	Abstract Class: Provides a base class to its subclasses - use when we have a clear class hierarchy
	One class can only inherit from one parent class -single inheritance
		one class can implement multiple interfaces
	Methods in abstract class can be abstract or non-abstract, but methods in interface are by default abstract
11) What accessibility level are members of an interface?
	Public
12) True/False. Polymorphism allows derived classes to provide different implementations of the same method.
	TRUE
13) True/False. The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
	TRUE
14) True/False. The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
	FALSE
15) True/False. Abstract methods can be used in a normal (non-abstract) class.
	FALSE
16) True/False. Normal (non-abstract) methods can be used in an abstract class.
	TRUE
17) True/False. Derived classes can override methods that were virtual in the base class.
	TRUE	
18) True/False. Derived classes can override methods that were abstract in the base class.
	FALSE
19) True/False. In a derived class, you can override a method that was neither virtual non abstract in the base class.
	FALSE
20) True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
	FALSE
21) True/False. A class that implements an interface is allowed to have other members that arenâ€™t defined in the interface.
	TRUE
22) True/False. A class can have more than one base class.
	FALSE
23) True/False. A class can implement more than one interface.
	TRUE
